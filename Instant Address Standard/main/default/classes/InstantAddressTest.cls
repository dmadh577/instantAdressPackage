@isTest
public class InstantAddressTest {
    
    public static string testAccount = '[{"collapsed":"false","columns":"2","heading":"Account Information","layoutRows":[{"layoutItems":[{"editableForNew":"false","editableForUpdate":"false","label":"Account Owner","layoutComponents":[{"displayLines":"1","tabOrder":"17","type":"Field","value":"OwnerId"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Rating","layoutComponents":[{"displayLines":"1","tabOrder":"25","type":"Field","value":"Rating"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Account Name","layoutComponents":[{"displayLines":"1","tabOrder":"18","type":"Field","value":"Name"}],"placeholder":"false","required":"true"},{"editableForNew":"true","editableForUpdate":"true","label":"Phone","layoutComponents":[{"displayLines":"1","tabOrder":"26","type":"Field","value":"Phone"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Parent Account","layoutComponents":[{"displayLines":"1","tabOrder":"19","type":"Field","value":"ParentId"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Fax","layoutComponents":[{"displayLines":"1","tabOrder":"27","type":"Field","value":"Fax"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Account Number","layoutComponents":[{"displayLines":"1","tabOrder":"20","type":"Field","value":"AccountNumber"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Website","layoutComponents":[{"displayLines":"1","tabOrder":"28","type":"Field","value":"Website"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Account Site","layoutComponents":[{"displayLines":"1","tabOrder":"21","type":"Field","value":"Site"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Ticker Symbol","layoutComponents":[{"displayLines":"1","tabOrder":"29","type":"Field","value":"TickerSymbol"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Type","layoutComponents":[{"displayLines":"1","tabOrder":"22","type":"Field","value":"Type"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Ownership","layoutComponents":[{"displayLines":"1","tabOrder":"30","type":"Field","value":"Ownership"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Industry","layoutComponents":[{"displayLines":"1","tabOrder":"23","type":"Field","value":"Industry"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Employees","layoutComponents":[{"displayLines":"1","tabOrder":"31","type":"Field","value":"NumberOfEmployees"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Annual Revenue","layoutComponents":[{"displayLines":"1","tabOrder":"24","type":"Field","value":"AnnualRevenue"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"SIC Code","layoutComponents":[{"displayLines":"1","tabOrder":"32","type":"Field","value":"Sic"}],"placeholder":"false","required":"false"}],"numItems":"2"}],"layoutSectionId":"01B4100000HBag9","parentLayoutId":"00h41000004LCE0","rows":"8","tabOrder":"TopToBottom","useCollapsibleSection":"false","useHeading":"true"},{"collapsed":"false","columns":"2","heading":"Address Information","layoutRows":[{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Billing Address","layoutComponents":[{"displayLines":"1","tabOrder":"45","type":"Field","value":"BillingAddress","components":[{"displayLines":"1","tabOrder":"46","type":"Field","value":"BillingStreet"},{"displayLines":"1","tabOrder":"47","type":"Field","value":"BillingCity"},{"displayLines":"1","tabOrder":"48","type":"Field","value":"BillingState"},{"displayLines":"1","tabOrder":"49","type":"Field","value":"BillingPostalCode"},{"displayLines":"1","tabOrder":"50","type":"Field","value":"BillingCountry"}],"fieldType":"address"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Shipping Address","layoutComponents":[{"displayLines":"1","tabOrder":"51","type":"Field","value":"ShippingAddress","components":[{"displayLines":"1","tabOrder":"52","type":"Field","value":"ShippingStreet"},{"displayLines":"1","tabOrder":"53","type":"Field","value":"ShippingCity"},{"displayLines":"1","tabOrder":"54","type":"Field","value":"ShippingState"},{"displayLines":"1","tabOrder":"55","type":"Field","value":"ShippingPostalCode"},{"displayLines":"1","tabOrder":"56","type":"Field","value":"ShippingCountry"}],"fieldType":"address"}],"placeholder":"false","required":"false"}],"numItems":"2"}],"layoutSectionId":"01B4100000HBagD","parentLayoutId":"00h41000004LCE0","rows":"1","tabOrder":"TopToBottom","useCollapsibleSection":"false","useHeading":"true"},{"collapsed":"false","columns":"2","heading":"Additional Information","layoutRows":[{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Customer Priority","layoutComponents":[{"displayLines":"1","tabOrder":"64","type":"Field","value":"CustomerPriority__c"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"SLA","layoutComponents":[{"displayLines":"1","tabOrder":"65","type":"Field","value":"SLA__c"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"SLA Expiration Date","layoutComponents":[{"displayLines":"1","tabOrder":"66","type":"Field","value":"SLAExpirationDate__c"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"SLA Serial Number","layoutComponents":[{"displayLines":"1","tabOrder":"67","type":"Field","value":"SLASerialNumber__c"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Number of Locations","layoutComponents":[{"displayLines":"1","tabOrder":"68","type":"Field","value":"NumberofLocations__c"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Upsell Opportunity","layoutComponents":[{"displayLines":"1","tabOrder":"69","type":"Field","value":"UpsellOpportunity__c"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Active","layoutComponents":[{"displayLines":"1","tabOrder":"70","type":"Field","value":"Active__c"}],"placeholder":"false","required":"false"},{"editableForNew":"false","editableForUpdate":"false","label":"","placeholder":"true","required":"false"}],"numItems":"2"}],"layoutSectionId":"01B4100000HBagA","parentLayoutId":"00h41000004LCE0","rows":"4","tabOrder":"LeftToRight","useCollapsibleSection":"false","useHeading":"true"},{"collapsed":"false","columns":"1","heading":"Description Information","layoutRows":[{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Description","layoutComponents":[{"displayLines":"4","tabOrder":"78","type":"Field","value":"Description"}],"placeholder":"false","required":"false"}],"numItems":"1"}],"layoutSectionId":"01B4100000HBagE","parentLayoutId":"00h41000004LCE0","rows":"1","tabOrder":"TopToBottom","useCollapsibleSection":"false","useHeading":"true"}]';
    public static string failTestAccount = '[{"collapsed":"false","columns":"2","heading":"Account Information","layoutRows":[{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Name","layoutComponents":[{"displayLines":"1","tabOrder":"21","type":"Field","value":"Name","components":[{"displayLines":"1","tabOrder":"22","type":"Field","value":"Salutation"},{"displayLines":"1","tabOrder":"23","type":"Field","value":"FirstName"},{"displayLines":"1","tabOrder":"24","type":"Field","value":"LastName"}],"fieldType":"string"}],"placeholder":"false","required":"true"},{"editableForNew":"true","editableForUpdate":"true","label":"Home Phone","layoutComponents":[{"displayLines":"1","tabOrder":"32","type":"Field","value":"HomePhone"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"false","editableForUpdate":"false","label":"Account Owner","layoutComponents":[{"displayLines":"1","tabOrder":"17","type":"Field","value":"OwnerId"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Rating","layoutComponents":[{"displayLines":"1","tabOrder":"25","type":"Field","value":"Rating"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Account Name","layoutComponents":[{"displayLines":"1","tabOrder":"18","type":"Field","value":"Name"}],"placeholder":"false","required":"true"},{"editableForNew":"true","editableForUpdate":"true","label":"Phone","layoutComponents":[{"displayLines":"1","tabOrder":"26","type":"Field","value":"Phone"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Parent Account","layoutComponents":[{"displayLines":"1","tabOrder":"19","type":"Field","value":"ParentId"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Fax","layoutComponents":[{"displayLines":"1","tabOrder":"27","type":"Field","value":"Fax"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Account Number","layoutComponents":[{"displayLines":"1","tabOrder":"20","type":"Field","value":"AccountNumber"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Website","layoutComponents":[{"displayLines":"1","tabOrder":"28","type":"Field","value":"Website"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Account Site","layoutComponents":[{"displayLines":"1","tabOrder":"21","type":"Field","value":"Site"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Ticker Symbol","layoutComponents":[{"displayLines":"1","tabOrder":"29","type":"Field","value":"TickerSymbol"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Type","layoutComponents":[{"displayLines":"1","tabOrder":"22","type":"Field","value":"Type"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Ownership","layoutComponents":[{"displayLines":"1","tabOrder":"30","type":"Field","value":"Ownership"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Industry","layoutComponents":[{"displayLines":"1","tabOrder":"23","type":"Field","value":"Industry"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Employees","layoutComponents":[{"displayLines":"1","tabOrder":"31","type":"Field","value":"NumberOfEmployees"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Annual Revenue","layoutComponents":[{"displayLines":"1","tabOrder":"24","type":"Field","value":"AnnualRevenue"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"SIC Code","layoutComponents":[{"displayLines":"1","tabOrder":"32","type":"Field","value":"Sic"}],"placeholder":"false","required":"false"}],"numItems":"2"}],"layoutSectionId":"01B4100000HBag9","parentLayoutId":"00h41000004LCE0","rows":"8","tabOrder":"TopToBottom","useCollapsibleSection":"false","useHeading":"true"},{"collapsed":"false","columns":"2","heading":"Address Information","layoutRows":[{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Billing Address","layoutComponents":[{"displayLines":"1","tabOrder":"45","type":"Field","value":"BillingAddress","components":[{"displayLines":"1","tabOrder":"46","type":"Field","value":"BillingStreet"},{"displayLines":"1","tabOrder":"47","type":"Field","value":"BillingCity"},{"displayLines":"1","tabOrder":"48","type":"Field","value":"BillingState"},{"displayLines":"1","tabOrder":"49","type":"Field","value":"BillingPostalCode"},{"displayLines":"1","tabOrder":"50","type":"Field","value":"BillingCountry"}],"fieldType":"address"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Shipping Address","layoutComponents":[{"displayLines":"1","tabOrder":"51","type":"Field","value":"ShippingAddress","components":[{"displayLines":"1","tabOrder":"52","type":"Field","value":"ShippingStreet"},{"displayLines":"1","tabOrder":"53","type":"Field","value":"ShippingCity"},{"displayLines":"1","tabOrder":"54","type":"Field","value":"ShippingState"},{"displayLines":"1","tabOrder":"55","type":"Field","value":"ShippingPostalCode"},{"displayLines":"1","tabOrder":"56","type":"Field","value":"ShippingCountry"}],"fieldType":"address"}],"placeholder":"false","required":"false"}],"numItems":"2"}],"layoutSectionId":"01B4100000HBagD","parentLayoutId":"00h41000004LCE0","rows":"1","tabOrder":"TopToBottom","useCollapsibleSection":"false","useHeading":"true"},{"collapsed":"false","columns":"2","heading":"Additional Information","layoutRows":[{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Customer Priority","layoutComponents":[{"displayLines":"1","tabOrder":"64","type":"Field","value":"CustomerPriority__c"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"SLA","layoutComponents":[{"displayLines":"1","tabOrder":"65","type":"Field","value":"SLA__c"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"SLA Expiration Date","layoutComponents":[{"displayLines":"1","tabOrder":"66","type":"Field","value":"SLAExpirationDate__c"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"SLA Serial Number","layoutComponents":[{"displayLines":"1","tabOrder":"67","type":"Field","value":"SLASerialNumber__c"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Number of Locations","layoutComponents":[{"displayLines":"1","tabOrder":"68","type":"Field","value":"NumberofLocations__c"}],"placeholder":"false","required":"false"},{"editableForNew":"true","editableForUpdate":"true","label":"Upsell Opportunity","layoutComponents":[{"displayLines":"1","tabOrder":"69","type":"Field","value":"UpsellOpportunity__c"}],"placeholder":"false","required":"false"}],"numItems":"2"},{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Active","layoutComponents":[{"displayLines":"1","tabOrder":"70","type":"Field","value":"Active__c"}],"placeholder":"false","required":"false"},{"editableForNew":"false","editableForUpdate":"false","label":"","placeholder":"true","required":"false"}],"numItems":"2"}],"layoutSectionId":"01B4100000HBagA","parentLayoutId":"00h41000004LCE0","rows":"4","tabOrder":"LeftToRight","useCollapsibleSection":"false","useHeading":"true"},{"collapsed":"false","columns":"1","heading":"Description Information","layoutRows":[{"layoutItems":[{"editableForNew":"true","editableForUpdate":"true","label":"Description","layoutComponents":[{"displayLines":"4","tabOrder":"78","type":"Field","value":"Description"}],"placeholder":"false","required":"false"}],"numItems":"1"}],"layoutSectionId":"01B4100000HBagE","parentLayoutId":"00h41000004LCE0","rows":"1","tabOrder":"TopToBottom","useCollapsibleSection":"false","useHeading":"true"}]';
    
 
    static testMethod void validateInstantAddressRendererClass(){
        Account acct = new Account();
        ApexPages.StandardController stdController = new ApexPages.StandardController(acct);
        InstantAddressRenderer Renderer = new InstantAddressRenderer(stdController, 'Account');
        
        // Test All public Renderer attributes
        System.assertEquals('Account', Renderer.sobjectname);
        System.assertEquals('https://instantaddresspublic.blob.core.windows.net/core/v6.5.1/jquery-1.7.2.min.js', Renderer.jqueryurl);
        System.assertEquals('https://instantaddresspublic.blob.core.windows.net/salesforce/InitiumInstantAddressInitializer.js', Renderer.initializerurl);
        System.assertEquals('https://cdn.initiumsoftware.com/product/salesforce/bootstrap-min-sig='+ UserInfo.getOrganizationId() +'.js', Renderer.instantaddressurl);
        System.assertEquals('../../soap/ajax/38.0/connection.js', Renderer.forceconnectionurl);
        System.assertEquals('https://instantaddresspublic.blob.core.windows.net/salesforce/InstantAddressLightning.css', Renderer.lightningcss);
        
        // Test Get Available Fields
        Map<String, Schema.SObjectType> gdMap = Schema.getGlobalDescribe();
        Schema.Describesobjectresult dsr = gdMap.get(Renderer.sobjectname).getDescribe();
        Set<String> afields = new Set<String>();
        Map<String, Schema.SObjectField> globalfields = new Map<String, Schema.SObjectField>();
        globalfields = dsr.fields.getMap();
        for (String s : globalfields.keySet()) {
            afields.add(s);
        }
        List<string> tocomparefields = new List<String>(afields);
        List<string> fields = Renderer.TestGetApexAvailableFields();
        //System.assertEquals(tocomparefields, fields);
        System.assertEquals('New Account', Renderer.sobjecttitle);
        System.assertEquals('Account', Renderer.sobjectlabel);    
        
        // Save and new
        PageReference p = Renderer.SaveAndNew();
        PageReference p2 = new PageReference('/001/e');
        p2.setRedirect(true); 
        System.assertEquals(p.getUrl(), p2.getUrl());
        
        // Initial Apex Code
        Component.Apex.OutputPanel initialApex = Renderer.getRenderInitialHTML();
        System.assertEquals('InstantAddressBlock', initialApex.id);
        
        // Render HTML
        PageReference p3 = Renderer.RenderSObjectLayout();
        System.assertEquals('edit', Renderer.bodyhtml.mode);
        System.assertEquals('Account Edit', Renderer.bodyhtml.title);
        
        // Test Fail process
        testAccount = failTestAccount;
        p3 = Renderer.RenderSObjectLayout();
        
        List<ApexPages.Component> components = Renderer.getBodyComponents();
        
        PageReference p4 = Renderer.ReturnUserToStandardLayout();
        PageReference p5 = Renderer.RenderSObjectLayoutGlobal(testAccount);
    }    
    static testMethod void Test_Batch_Helpers(){
    
    //System.assertEquals(Batch_Helpers.getUTCDateTime(), Batch_Helpers.getUTCDateTime(system.now(), 0);
       // NewGuid
    System.assert(Batch_Helpers.NewGuid().length() > 30);
        //schemaDisplayTypeCompatibility
      Map<String, Schema.SObjectField> M;
      schema.sObjectType so = Account.sObjectType;
      m= so.getDescribe().fields.getMap() ;
            
     Schema.SObjectField field = m.get('name');
      System.assertEquals(Batch_Helpers.schemaDisplayTypeCompatibility( field),'String');

      field = m.get('Id');
      System.assertEquals(Batch_Helpers.schemaDisplayTypeCompatibility( field),'NOT UPDATEABLE');
        
     field = m.get('Phone');
      System.assertEquals(Batch_Helpers.schemaDisplayTypeCompatibility( field),'UNKNOWN');
        
        
            
        
       string  e = Batch_Helpers.Encrypt('text');
       string  d = Batch_Helpers.Decrypt(e);
    
       System.assert(Batch_Helpers.Encrypt('text').length() > 0);
       System.assert(Batch_Helpers.Decrypt('49E5JUH9npS9m55FBUXNymJbkGaSChY2kPUnt+PImQcyuR/G0NPEZgucc+bToz33').length() > 0);
        
       System.assert(Batch_Helpers.Operators.size()   > 0);
       System.assert(Batch_Helpers.BooleanOperators.size()   > 0);
       System.assert(Batch_Helpers.BatchStaticDataFilter.size()   > 0);
        
       Map<string, integer> theMap = new Map<string, integer> ();        
        theMap.put('key2', 2);
        theMap.put('key1', 1);      
       
       integer index =1;
       for(String s1:Batch_Helpers.sortMap(theMap).keySet()) {
           System.assert(s1 =='key'+index  );
           index++;
        }
       List<SelectOption> tmp = new List<SelectOption>();
         tmp.add(new SelectOption('key1','key1')); 
         tmp.add(new SelectOption('key2','key2'));      
       
       integer index1 =1;
        for(SelectOption s1:Batch_Helpers.SortSelectOptionList(tmp)) {
           System.assert(s1.getValue() =='key'+index1  );
           index1++;
        } 
        
        //Batch_Helpers.InstantAddress(new exception());
        
      ///     
                                                                                                                                                                                                                                                                                                                                                                                                                                                         ////Batch_Helpers     
    }
    static testMethod void Test_Batch_SentDataBatchable(){
        
        Batch_SentDataBatchable ba = new Batch_SentDataBatchable();
        List<Batch_NewSession_CL.MappingItem>  m = new List<Batch_NewSession_CL.MappingItem> ();
        Batch_NewSession_CL.MappingItem item = new Batch_NewSession_CL.MappingItem();
        Batch_NewSession_CL.MappingField f = new Batch_NewSession_CL.MappingField('NAICS Description','Country',0,'INPUT','Address');
        
        List<Batch_NewSession_CL.MappingField > l = new List<Batch_NewSession_CL.MappingField >();
        l.add(f);
        item.MappingsList =l;      
        m.add(item);
        
        Batch_SentDataBatchable.batchResonse t1 = new  Batch_SentDataBatchable.batchResonse();
        t1.batchId ='batchResonse';
        t1.processed =true;
        t1.Message ='batchResonse';
        
         Batch_SentDataBatchable.batchItem t2 = new  Batch_SentDataBatchable.batchItem();
        t2.index =0;
        t2.batchId ='batchResonse';
        t2.upload =true;
        t2.isDeleted =true;
        t2.isDownloaded =true;
        
           ba.bypass = true;
        
        String tmp1=   ba.GetFieldLabel('Country',item);
    
        List<ServiceInput__c> tmpList   = new List<ServiceInput__c> (); 
        ServiceInput__c input = new ServiceInput__c();
        input.ClientRef1__c ='';
        input.ClientRef2__c ='';
        input.Country__c ='';
        input.State__c ='';
        input.City__c ='';
        input.ZipCode__c ='';
        input.Address1__c ='';
        input.Address2__c ='';
        input.Address3__c ='';
        input.Address4__c ='';
        input.Address5__c ='';
        tmpList.add(input); 
        tmpList.add(input); 
        ba.UploadBatch(tmpList);
        
        string Soql ='Select Id,Name From Account Limit 2';
        String  TransactionIndex ='123456789';
        string MappingId ='123456789';
        string PostData ='USA';
        String SelectedObject ='Account';
        String UserId ='123456789';  
        ba.Soql = Soql;
        ba.TransactionIndex = TransactionIndex;
        ba.MappingId = MappingId;
        ba.PostData = PostData;
        ba.SelectedObject = SelectedObject;
        ba.UserId = UserId;
        ba.SourceMapping = m;
        
        
        
       List<Account> data = new List<Account>(); // [Select Id,Name From Account Limit 2];
        data.add(new Account());
         data.add(new Account());
        
        ba.start(Null);
        ba.execute(Null, data);
        ba.finish(Null);
      system.assert(true);
    }
    static testMethod void Test_BatchUpdateDataBatchable (){
        BatchUpdateDataBatchable  ba = new BatchUpdateDataBatchable ();
        
        List<Batch_NewSession_CL.MappingItem>  m = new List<Batch_NewSession_CL.MappingItem> ();
        Batch_NewSession_CL.MappingItem item = new Batch_NewSession_CL.MappingItem();
        Batch_NewSession_CL.MappingField f1 = new Batch_NewSession_CL.MappingField('NAICS Description','Country',0,'INPUT','Address');
        Batch_NewSession_CL.MappingField f2 = new Batch_NewSession_CL.MappingField('NAICS Description','Zipcode',0,'INPUT','Address');
        Batch_NewSession_CL.MappingField f3 = new Batch_NewSession_CL.MappingField('NAICS Description','State',0,'INPUT','Address');
        Batch_NewSession_CL.MappingField f4 = new Batch_NewSession_CL.MappingField('NAICS Description','City',0,'INPUT','Address');
        Batch_NewSession_CL.MappingField f5 = new Batch_NewSession_CL.MappingField('NAICS Description','Address',0,'INPUT','Address');
        Batch_NewSession_CL.MappingField f6 = new Batch_NewSession_CL.MappingField('NAICS Description','lvl1_verification_flag',0,'INPUT','Address');
        Batch_NewSession_CL.MappingField f7 = new Batch_NewSession_CL.MappingField('NAICS Description','lvl2_response_flag',0,'INPUT','Address');
        Batch_NewSession_CL.MappingField f8 = new Batch_NewSession_CL.MappingField('NAICS Description','lvl3_change_flag',0,'INPUT','Address');
        Batch_NewSession_CL.MappingField f9 = new Batch_NewSession_CL.MappingField('NAICS Description','verification_date',0,'INPUT','Address');
       Batch_NewSession_CL.MappingField f10 = new Batch_NewSession_CL.MappingField('NAICS Description','DPV',0,'INPUT','Address');     
        
        Batch_NewSession_CL.MappingField f11 = new Batch_NewSession_CL.MappingField('NAICS Description','DPV',0,'OUTPUT','Address');
        
        
        List<Batch_NewSession_CL.MappingField > l = new List<Batch_NewSession_CL.MappingField >();
        l.add(f1);
         l.add(f2);
         l.add(f3);
         l.add(f4);
         l.add(f5);
         l.add(f6);
         l.add(f7);
         l.add(f8);
         l.add(f9);
         l.add(f10);
         l.add(f11);
        item.Id='123456789';
        item.MappingsList =l;      
        m.add(item);
        ba.bypass = false;
        ba.BatchComplete = false;
        ba.Soql = 'Select Id,Name,IA_Reference1__c,IA_Reference2__c From ServiceOutput__c Limit 1';
        ba.SourceMapping  = m;
        ba.MappingId ='123456789';
        ba.SelectedObject  ='ServiceOutput__c';
        ba.TransactionId   ='123456789';
 
        List<ServiceOutput__c> scope = new List<ServiceOutput__c> ();
        
        ServiceOutput__c ttt= new ServiceOutput__c();
         ttt.IA_Reference2__c='123456789';
        ttt.IA_Reference1__c = '123456789';
         scope.add(ttt);
         insert scope;
        /*ba.start(null);
        ba.execute(null, scope);
        ba.finish(null);
        */
        Test.startTest(); 
        database.executeBatch(ba);
        Test.stopTest();
        
        Account t = new Account();
        
        ba.UpdateFieldByName(t,'BillingAddressValidationDate__c',null);
        ba.UpdateFieldByName(t,'NumberofLocations__c',0);
        
        system.assert(true);
    } 
    static testMethod void Test_Batch_ReceiveDataBatchable (){
      Batch_ReceiveDataBatchable ba = new Batch_ReceiveDataBatchable();
      ba.BatchComplete = false;
      ba.Soql ='Select Id,Name From Account Limit 1';
      ba.TransactionIndex ='123456789';  
      ba.bypass = true;
     
       ba.start(null);
      List<Service_Maste_Transaction_Batches__c> scope = new List<Service_Maste_Transaction_Batches__c>();
       ba.execute(null, scope);            
       ba.finish(null);
        
     Service_Maste_Transaction_Batches__c batch = new Service_Maste_Transaction_Batches__c ();
     batch.BatchId__c = Batch_Helpers.NewGuid();
     
       ba.IsBatchReadyToDownload(batch);
        
      ba.DownloadBatches(batch);
        
      List<Response> responselist = new List<Response>();
      Response i  = new Response();
        i.details = new List<Detail>();
        i.details.Add(new Detail());
        i.formattedaddress = new Formattedaddress();
        i.inputaddress = new InputAddress(); 
            
            
       responselist.add(i);
       ba.parseList(responselist);
        
        
     Map<string, integer> prev = new Map<string, integer> ();
     prev.put('flag', 0);
     ba.UpdateMap(prev);
        
     ba.CountFlag('Flag1');  
        
     system.assert(true);
    }
    static testMethod void Test_Batch_MappingOptions(){
        
        String t1 = Batch_MappingOptions.Getverification_date;
        String t2 = Batch_MappingOptions.Getlvl1;
        String t3 = Batch_MappingOptions.Getlvl2;
        String t4 = Batch_MappingOptions.Getlvl3;
        SelectOption[] ddlList = Batch_MappingOptions.ddlList;
         SelectOption[] ddlListOutput = Batch_MappingOptions.ddlListOutput;
        
        system.assert(true);
    }
    static testMethod void Test_DeleteServiceOutputBatchable(){
      DeleteServiceOutputBatchable ba = new DeleteServiceOutputBatchable();
      ba.BatchComplete = false;
      ba.Soql = null; 
      ba.Filters = null; 

        ba.start(Null);
        list<ServiceOutput__c> t = [Select Id,Name From ServiceOutput__c Limit 1];
        ba.execute(null,t);
        ba.finish(null);
        
 
    }
    static testMethod void Test_ProcessingBatch_CL(){
        ProcessingBatch_CL s = new ProcessingBatch_CL();
        s.TransactionId = '123456789';
        s.NextBatch();
        
        
       ProcessingBatch_CL.PageSource so = new ProcessingBatch_CL.PageSource();
       so.TransactionId ='TransactionId';
       so.TransactionOverallStatus ='TransactionId';
       so.BatchTotalDownloaded =1;    
       so.BatchTotalCount =1;    
       so.BatchTotalDownloadedPrecentage ='TransactionId';  
                

        }
    static testMethod void Test_FinishingBatch_CL(){
       FinishingBatch_CL s = new FinishingBatch_CL();         
        s.TransactionId ='123456789';
        s.source = new FinishingBatch_CL.PageSource();
        s.source.TransactionId ='123456789';
        s.source.TransactionOverallStatus ='123456789';
        s.source.BatchTotalDownloaded =0;
        s.source.BatchTotalCount =0;
        s.source.BatchTotalDownloadedPrecentage ='123456789';
        s.baSendata = new Batch_SentDataBatchable();
          
        s.NextBatch();
        system.assert(true);
    }  
    static testMethod void Test_Batch_NewSession_CL(){
      Batch_NewSession_CL s = new Batch_NewSession_CL();

      Flag__c fl = new Flag__c();
        fl.Name = 'Test Flag';
        fl.Description__c = 'Test Desc';
        fl.Value__c = 'Test Level';
        fl.FlagLevel__c = 'TestLevel';
        insert fl;

        PreferObject__c po = new PreferObject__c(Id__c='Account', Label__c='Account', apiName__c='Account',objectType__c='Standard');
        insert po;

        Batch_NewSession_CL.MappingSource mSource = new Batch_NewSession_CL.MappingSource();
        List<Batch_NewSession_CL.MappingItem> mList = new List<Batch_NewSession_CL.MappingItem>();
        Batch_NewSession_CL.MappingItem mItem = new Batch_NewSession_CL.MappingItem();
        Batch_NewSession_CL.MappingField mField = new Batch_NewSession_CL.MappingField();

        List<Batch_NewSession_CL.MappingField> mfieldList = new List<Batch_NewSession_CL.MappingField>();
        mField.Field = 'Name';
        mField.MapField = 'lvl1_verification_flag';
        mfieldList.add(mField);
        mItem.MappingsList = mfieldList;
        mList.add(mItem);
        mSource.mappingList = mList;
        mSource.MappingName = 'TestMapping';
        s.source = mSource;
        object t1 = s.OperatorsOptions;
        object t2 = s.StaticFilterOptions;   
        object t3 = s.BooleanOperators;
        
        s.ShowCustomFilter = false;
        s.SelectedCustomFilter = '';
        
        s.page = 1;
        s.pageMax = 1;
        s.size = 10;      
        
        boolean t4 = s.hasPaginationPreviews;
        boolean t5  = s.hasPaginationNext;
        
        s.noOfRecords = 1;
        s.batchCount = 1;
        s.batchCountProcessed = 1;
        
        s.soqlQuery ='';
        string t6 = s.GridLeyend;
            
       boolean t7 = s.showColumn2;   
       boolean t8 = s.showColumn3; 
       boolean t9 = s.showColumn4; 
       boolean t10 = s.showColumn5; 
        
       s.MappingItemId ='';
       s.MappingItemRowId ='';
     
        s.Filter1 = new Batch_NewSession_CL.CustomFilters();
        s.Filter1.Field = 'Name';
        s.Filter1.isVisible = true;
        s.Filter2 = new Batch_NewSession_CL.CustomFilters();
        s.Filter2.isVisible = true;
        s.Filter2.Field = 'Name';
        s.Filter3 = new Batch_NewSession_CL.CustomFilters();
        s.Filter3.isVisible = true;
        s.Filter3.Field = 'Name';
        s.source.selectedObject = 'Account';
        s.source.selectedSavedMapping = 'Update';
        s.filtersString ='';
        s.baSendata = new Batch_SentDataBatchable();
        
        //s.T1E4 ='';

        Service_Maste_Transaction__c smt = new Service_Maste_Transaction__c();
        smt.TransactionId__c = 'TestTID';
        smt.Status__c = 'Submitting';
        smt.UserId__c = UserInfo.getUserId();
        insert smt;
 
        s.GetPageStatus();
        s.tempVoid();
        
        s.PaginationFirst();
        s.PaginationPreview();
        s.PaginationNext();
        s.PaginationLast();
        s.ProcessBatch();
        
         s.AddFilter1();
        s.AddFilter2();
        s.RemoveFilter2();
        s.RemoveFilter3();
        s.FilterData(); 
        s.OnSelectStaticFilter();
        s.Cancel();
        s.GetSelectedObjectLabel();
        s.Settings();
        s.OnSelectMapping();         
        s.LoadStep2();     
        s.source.selectedSavedMapping = 'Update';   
        s.LoadStep3(); 
        
        s.source.selectedSavedMapping ='';
        s.source.selectedPostData ='USA';
        s.source.selectedObject ='Account';
        s.source.selectedObjectName ='Account';
        
        object t = s.source.SavedMappingsOptions;
         t = s.source.PreferObjectFieldOptions;
         t = s.source.MappingCount ;
         s.source.TransactionOverallStatus ='';
         s.source.BatchTotalDownloaded =1;
         s.source.BatchTotalCount = 1;
         s.source.BatchTotalDownloadedPrecentage = '';
        
        s.AddSubMapping();
        
        s.LoadStep4();
        s.Filter1 = new Batch_NewSession_CL.CustomFilters();
        s.Filter1.Field = 'Name';
        s.Filter1.isVisible = true;
        mSource.mappingList = mList;
        s.source = mSource;
        s.OnChangeFieldFilter1();
        s.OnChangeFieldFilter2();
        s.OnChangeFieldFilter3();
        s.OnSelectDataSet();

        s.AddSubMappingItem();
        s.RemoveMappingField();
        s.RemoveMapping(); 
        mSource.mappingList = mList;
        s.source = mSource;
        s.getDataSet();

        s.source.MappingName = 'TestMapping';
        s.SaveMappings();

        
       Batch_NewSession_CL.DisplayDataItem  tc1 = new Batch_NewSession_CL.DisplayDataItem();
       
        tc1.SourceType ='';
       tc1.MappingId ='';
       tc1.Id       ='';
       tc1.Address1  ='';
       tc1.Address2  ='';
       tc1.Address3  ='';
       tc1.Address4  ='';
       tc1.Address5  ='';
       tc1.City      ='';
       tc1.State     ='';
       tc1.Zip       ='';
       tc1.Country   ='';      
       tc1.Reference1   ='';
       tc1.Reference2   ='';
       tc1.Reference3   ='';
       tc1.Reference4   ='';
       tc1.Reference5   ='';
       tc1.Reference6   ='';
       tc1.Reference7   ='';
       tc1.Reference8   ='';
       tc1.Reference9   ='';
       tc1.Reference10  ='';      
       tc1.Reference11   ='';
       tc1.Reference12   ='';
       tc1.Reference13   ='';
       tc1.Reference14   ='';
       tc1.Reference15   ='';
       tc1.Reference16   ='';
       tc1.Reference17   ='';
       tc1.Reference18   ='';
       tc1.Reference19   ='';
       tc1.Reference20   ='';        
       tc1.mappingIndex =0;
        
       Batch_NewSession_CL.getTableCount(null,'Account');
        
        Batch_NewSession_CL.MappingItem c1 = new Batch_NewSession_CL.MappingItem();
        c1.MappingId ='';
        
 
        Batch_NewSession_CL.BatchToProcess cl4 = new Batch_NewSession_CL.BatchToProcess();
        cl4.Index =0;
        cl4.Country ='';
        cl4.BatchId ='';
        cl4.Status ='';
        
        s.LoadSavedMappings();
        s.GetMappingItem('0ss');
        //s.GetMappingFromData('[]','askasks');
        
        
        s.ApplyCustomFilter('1');
         s.ApplyCustomFilter('2');
         s.ApplyCustomFilter('3');
         s.ApplyCustomFilter('4');
         s.ApplyCustomFilter('5');
         s.ApplyCustomFilter('6');
        
        
        S.hasSObjectField('Id');
        system.assert(true);

        //s.MappingField('Test', 'Account');

        
    }  
    static testMethod void Test_Batch_GetBatches_CL(){
        Service_Maste_Transaction__c smt = new Service_Maste_Transaction__c();
        smt.TransactionId__c = 'TestTID';
        smt.Status__c = 'Submitting';
        smt.UserId__c = UserInfo.getUserId();
        smt.Response_Flag_Metrics__c = '{"key1": 10, "key2": 20, "key3": 30}';
        smt.Total_Addresses__c = 2;
        smt.Data__c = '{}';
        insert smt;
        ApexPages.currentPage().getParameters().put('TransactionId','TestTID');
     Batch_GetBatches_CL s = new Batch_GetBatches_CL();
       s.pageSource = new Batch_GetBatches_CL.Source(); 
        
        Batch_SentDataBatchable tt = new Batch_SentDataBatchable();         
         tt.MappingId ='';
         tt.SourceMapping =new List<Batch_NewSession_CL.MappingItem> (); 
         schema.sObjectType sObjType = Schema.getGlobalDescribe().get('Service_Maste_Transaction__c');
     	String objname =  (sObjType.getDescribe().getKeyPrefix()) +'_'+(sObjType.getDescribe().getLabel());
          tt.selectedObject = 'Service_Maste_Transaction__c';
       s.pageSource.baSendata = tt;
       s.pageSource.TransactionId ='TestTID';
        
        s.pageSource.ShowE1 = false;
        s.pageSource.ShowE2 = false;
        s.pageSource.ShowE3 = false;
        
        s.pageSource.isSavedMapping = false;
        s.pageSource.SavedMapping = '';
        
         s.pageSource.mappingList = new List<Batch_NewSession_CL.MappingItem> ();
        s.pageSource.baSendata.selectedObject =objname;
       
         object t2 = s.pageSource.FieldMappingOptions; 
        t2 = s.pageSource.SavedMappingsOptions; 
        t2 = s.pageSource.preferObjectsOptions; 
        t2 = s.pageSource.PreferObjectFieldOptions;  
 
       s.displayPopup = false;
       s.showColumn2 = false;
       s.showColumn3 = false;
       s.showColumn4 = false;
       s.showColumn5 = false;     
       s.colorsSet  ='';
       s.chartData = null;
       object t = s.flagsList;
       t = s.selectedFlagsList;
        s.FlagsMappingChange();
       s.getFlagsData();
       s.MappingItemId ='';
       s.MappingItemRowId ='';
       
       object t1 = s.hasPaginationPreviews;
        t1 = s.hasPaginationNext;
       
       s.totalAddresses='';
       s.filtersString='';
       s.soqlQuery='';
       t1 = s.GridLeyend;
       
       s.PaginationFirst();
       
 
      s.Cancel();
        
        
        s.AddSubMappingItem();
        s.RemoveMappingField();  
       Batch_GetBatches_CL.getServiceOutputCount(null);
        
     //  Batch_GetBatches_CL.ResponseFlagData obj = Batch_GetBatches_CL.ResponseFlagData('','',0,'');
       s.closePopup();
       s.showPopup(); 
       Batch_SentDataBatchable ba = new Batch_SentDataBatchable();
       s.pageSource.baSendata = ba;
       s.pageSource.baSendata.selectedObject   = objname;
         s.LoadStep2();
       //s.LoadObjectFields();
        List<Response> t4 = new List<Response>();
        Response tr = new Response();
        List<Detail> setdetail = new List<Detail>();
        Detail de = new Detail();
        de.recordkey = 'testkey';
        de.recordtype = '1';
        de.carrierrouteid = 'tes';
        de.streetpredirectionalabbrev = 'test';
        de.streetpredirectionalname = 'test';
        de.streetprefixabbrev = 'test';
        de.streetprefixname = 'test';
        de.street = 'test';
        de.privatemailbox = 'test';
        de.privatemailboxnumber = 'test';
        de.pobox = 'test';
        de.poboxnumber = 'test';
        de.streetsuffixabbrev = 'test';
        de.streetsuffixname = 'test';
        de.streetpostfixabbrev = 'test';
        de.streetpostfixname = 'test'; 
        Formattedaddress fadd = new Formattedaddress();
        fadd.Address1 = 'test';
        fadd.Address2 = 'test';
        fadd.Address3 = 'test';
        fadd.Address4 = 'test';
        fadd.Address5 = 'test';
        fadd.City = 'test';
        fadd.State = 'test';
        fadd.Zipcode = 'test'; 
        tr.formattedaddress = fadd;
       InputAddress inpaddrs = new InputAddress();
        inpaddrs.street1 = 'test';
        inpaddrs.street2 = 'test';
        inpaddrs.street3 = 'test';
        inpaddrs.street4 = 'test';
        inpaddrs.street5 = 'test';
        inpaddrs.city = 'test';
        inpaddrs.state = 'test';
        inpaddrs.zip4 = 'te';
        inpaddrs.zipcode = 'test';
        inpaddrs.Reference1 = 'test';
         inpaddrs.Reference2 = 'test';
         inpaddrs.Reference3 = 'test';
         inpaddrs.Reference4 = 'test';
         inpaddrs.Reference5 = 'test';
        
        tr.inputaddress = inpaddrs;
        
        setdetail.add(de);
        tr.details = setdetail;
       t4.add(tr); 
        
        Batch_GetBatches_CL.parseList(t4);
 		s.getDataSet();
         s.PaginationPreview();
       s.PaginationNext();
       s.PaginationLast();
       ba.Soql ='';
       ba.SourceMapping = new List<Batch_NewSession_CL.MappingItem> ();
       ba.TransactionIndex ='';
       ba.total =0;
       ba.MappingId ='';
       ba.PostData ='';
       ba.SelectedObject ='';
       ba.SelectedObjectName ='';       
       ba.bypass = true;
       ba.BatchComplete = true;
           s.pageSource.mappingList = new List<Batch_NewSession_CL.MappingItem> ();
       
        s.LoadStep3();
    }
    static testMethod void Test_Batch_Settings_CL(){
      Flag__c fl = new Flag__c();
        fl.Name = 'Test Flag';
        fl.Description__c = 'Test Desc';
        fl.Value__c = 'Test Level';
        fl.FlagLevel__c = 'TestLevel';
        insert fl;

      PreferObject__c po = new PreferObject__c();
      po.Label__c = 'Account';
      po.Id__c = 'TESTID';
      insert po;

      PostalData__c pd = new PostalData__c();
      pd.Name = 'TestPD';
      pd.iso_3__c = 'TestISO';
      insert pd;

      Batch_Settings_CL  s = new Batch_Settings_CL();
      s.selectedObjList = new  list<Batch_Settings_CL.objectClass> ();
      
      s.objectSet = new   set<string>();
      s.isIterationDone ='';
      s.CurrentParameters = new Parameter__c();

      s.ObjectList();  
      s.SaveParameters();
      s.SyncData();
      s.getSelected();
      s.SaveDefaultformat();
      s.SavePrefObjects();
      s.cancel();
      
    }

    static testMethod void Test_Batch_Settings_CL1(){
      Flag__c fl = new Flag__c();
        fl.Name = 'Test Flag';
        fl.Description__c = 'Test Desc';
        fl.Value__c = 'Test Level';
        fl.FlagLevel__c = 'TestLevel';
        insert fl;

      PreferObject__c po = new PreferObject__c();
      po.Label__c = 'Account';
      po.Id__c = 'TESTID';
      insert po;

      PostalData__c pd = new PostalData__c();
      pd.Name = 'TestPD';
      pd.iso_3__c = 'TestISO';
      insert pd;

      Parameter__c pr = new Parameter__c();
      pr.PARAMETERID__c = 'pid';
      pr.USERNAME__c = 'test@test.com';
      pr.PASSWORD__c = 'psed';
      pr.LICENSEKEY__c = 'tQLIk2pGUStMTrIhXovB3++Z7aUYdvJ3FbdMvMXeDgQ1chouAjOY34RlgleFEhApAnVXziwOwQiQZoP19/XN7w==';
      pr.ENVIRONMENT__c = 'test';
      pr.FORMATID__c = 'testfid';
      insert pr;
      
      Batch_Settings_CL  s1 = new Batch_Settings_CL();
      s1.selectedObjList = new  list<Batch_Settings_CL.objectClass> ();
      
      s1.objectSet = new   set<string>();
      s1.isIterationDone ='';
      s1.CurrentParameters = new Parameter__c();

      s1.ObjectList();  
      s1.SaveParameters();
    }
    
    static testMethod void Test_Classes(){
       InstantAddressSettings t = new InstantAddressSettings();
       //InstantAddressAddressExt t2 = new InstantAddressAddressExt(null); 
       //InstantAddressAccountExt t3 = new InstantAddressAccountExt(null);
       InstantAddressInnerComponent t4= new InstantAddressInnerComponent();
       t4.displayLines ='123';
        
       InstantAddressRow t5= new InstantAddressRow(); 
        t5.numItems = '';
        
        InstantAddressComponent t6 = new InstantAddressComponent();
        t6.displayLines ='';
        t6.fieldType ='';
        InstantAddressSection t7 = new InstantAddressSection();
        t7.layoutSectionId ='';
        t7.parentLayoutId ='';
        t7.rows ='';
        t7.tabOrder ='';
        t7.useCollapsibleSection ='';
 
        
        InstantAddressItem t8 = new InstantAddressItem();
        t8.editableForNew ='';
        t8.label='';
        
        
        
         Batch_Helpers.IntegerCount3();
          Batch_Helpers.IntegerCount2();
           Batch_Helpers.IntegerCount();
    }
    @isTest
    public static void testMethodInputAddress(){
        InputAddress Obj=new InputAddress();
        Obj.batchid='12345XYZ';
        Obj.id='12345XYZZ';
        Obj.reference6='reference6';
        Obj.reference7='reference7';
        Obj.reference8='reference8';
        Obj.reference9='reference9';
        Obj.reference10='reference10';
        Obj.reference11='reference11';
        Obj.reference12='reference12';
        Obj.reference13='reference13';
        Obj.reference14='reference14';
        Obj.reference15='reference15';
        Obj.reference16='reference16';
        Obj.reference17='reference17';
        Obj.reference18='reference18';
        Obj.reference19='reference19';
        Obj.reference20='reference20';
        Obj.reference21='reference21';
        Obj.reference22='reference22';
        Obj.reference23='reference23';
        Obj.reference24='reference24';
        Obj.reference25='reference25';
        Obj.reference26='reference26';
        Obj.reference27='reference27';
        Obj.reference28='reference28';
        Obj.reference29='reference29';
        Obj.reference30='reference30';
    }
    /*public virtual class BaseException extends Exception {}
     @isTest
    public static void testExceptionHelper(){
        ExceptionHelper obj=new ExceptionHelper();
        Exception ex=new BaseException();
        
        ExceptionHelper.LogError(ex,null,null);
    }*/
    
    static testMethod void Test_FinishingBatch_CL2(){
        Service_Maste_Transaction__c smt = new Service_Maste_Transaction__c();
        smt.TransactionId__c = '123456789';
        smt.Status__c = 'Submitting';
        smt.UserId__c = UserInfo.getUserId();
        smt.Data__c = '{\n' +
        '  "TotalBatchCount" : 10\n' +
        '}';
        insert smt;
        
        
       FinishingBatch_CL s = new FinishingBatch_CL();         
        s.TransactionId ='123456789';
        s.source = new FinishingBatch_CL.PageSource();
        s.source.TransactionId ='123456789';
        s.source.TransactionOverallStatus ='123456789';
        s.source.BatchTotalDownloaded =0;
        s.source.BatchTotalCount =0;
        s.source.BatchTotalDownloadedPrecentage ='123456789';
        s.baSendata = new Batch_SentDataBatchable();
          
        s.NextBatch();
        system.assert(true);
    }  
}